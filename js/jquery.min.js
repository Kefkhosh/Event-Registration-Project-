// jQuery-like functionality
(function(window) {
    'use strict';

    // Main jQuery-like object
    const $ = function(selector) {
        return new jQuery(selector);
    };

    // jQuery constructor
    function jQuery(selector) {
        this.elements = document.querySelectorAll(selector);
        return this;
    }

    // Core methods
    jQuery.prototype = {
        // Show/Hide methods
        show: function() {
            this.elements.forEach(el => {
                el.style.display = 'block';
                el.style.opacity = '1';
                el.style.visibility = 'visible';
            });
            return this;
        },
        hide: function() {
            this.elements.forEach(el => {
                el.style.display = 'none';
                el.style.opacity = '0';
                el.style.visibility = 'hidden';
            });
            return this;
        },
        slideToggle: function(duration = 300) {
            this.elements.forEach(el => {
                const isHidden = el.style.display === 'none' || el.style.display === '';
                if (isHidden) {
                    el.style.display = 'block';
                    el.style.height = '0';
                    el.style.overflow = 'hidden';
                    el.style.transition = `height ${duration}ms ease-in-out`;
                    setTimeout(() => {
                        el.style.height = el.scrollHeight + 'px';
                    }, 10);
                } else {
                    el.style.height = '0';
                    setTimeout(() => {
                        el.style.display = 'none';
                    }, duration);
                }
            });
            return this;
        },
        slideDown: function(duration = 300) {
            this.elements.forEach(el => {
                el.style.display = 'block';
                el.style.height = '0';
                el.style.overflow = 'hidden';
                el.style.transition = `height ${duration}ms ease-in-out`;
                setTimeout(() => {
                    el.style.height = el.scrollHeight + 'px';
                }, 10);
            });
            return this;
        },
        slideUp: function(duration = 300) {
            this.elements.forEach(el => {
                el.style.height = '0';
                el.style.overflow = 'hidden';
                el.style.transition = `height ${duration}ms ease-in-out`;
                setTimeout(() => {
                    el.style.display = 'none';
                }, duration);
            });
            return this;
        },
        fadeIn: function(duration = 300) {
            this.elements.forEach(el => {
                el.style.opacity = '0';
                el.style.display = 'block';
                el.style.transition = `opacity ${duration}ms ease-in-out`;
                setTimeout(() => {
                    el.style.opacity = '1';
                }, 10);
            });
            return this;
        },
        fadeOut: function(duration = 300) {
            this.elements.forEach(el => {
                el.style.opacity = '1';
                el.style.transition = `opacity ${duration}ms ease-in-out`;
                setTimeout(() => {
                    el.style.opacity = '0';
                    setTimeout(() => {
                        el.style.display = 'none';
                    }, duration);
                }, 10);
            });
            return this;
        },

        // Class methods
        addClass: function(className) {
            this.elements.forEach(el => el.classList.add(className));
            return this;
        },
        removeClass: function(className) {
            this.elements.forEach(el => el.classList.remove(className));
            return this;
        },
        toggleClass: function(className) {
            this.elements.forEach(el => el.classList.toggle(className));
            return this;
        },
        hasClass: function(className) {
            return this.elements[0]?.classList.contains(className);
        },

        // DOM manipulation
        html: function(content) {
            if (content) {
                this.elements.forEach(el => el.innerHTML = content);
                return this;
            }
            return this.elements[0]?.innerHTML;
        },
        text: function(content) {
            if (content) {
                this.elements.forEach(el => el.textContent = content);
                return this;
            }
            return this.elements[0]?.textContent;
        },
        val: function(value) {
            if (value) {
                this.elements.forEach(el => el.value = value);
                return this;
            }
            return this.elements[0]?.value;
        },

        // Event handling
        on: function(event, handler) {
            this.elements.forEach(el => el.addEventListener(event, handler));
            return this;
        },
        click: function(handler) {
            return this.on('click', handler);
        },

        // AJAX simulation
        ajax: function(options) {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    if (options.success) {
                        options.success({ data: 'Simulated AJAX response' });
                    }
                    resolve({ data: 'Simulated AJAX response' });
                }, options.timeout || 1000);
            });
        },

        // Utility methods
        each: function(callback) {
            this.elements.forEach(callback);
            return this;
        },
        find: function(selector) {
            const found = [];
            this.elements.forEach(el => {
                found.push(...el.querySelectorAll(selector));
            });
            return $(found);
        },
        parent: function() {
            return $(this.elements[0]?.parentElement);
        },
        siblings: function() {
            const siblings = [];
            this.elements.forEach(el => {
                const parent = el.parentElement;
                Array.from(parent.children).forEach(child => {
                    if (child !== el) siblings.push(child);
                });
            });
            return $(siblings);
        },
        closest: function(selector) {
            return $(this.elements[0]?.closest(selector));
        },
        attr: function(attr, value) {
            if (value) {
                this.elements.forEach(el => el.setAttribute(attr, value));
                return this;
            }
            return this.elements[0]?.getAttribute(attr);
        },
        data: function(key, value) {
            if (value) {
                this.elements.forEach(el => el.dataset[key] = value);
                return this;
            }
            return this.elements[0]?.dataset[key];
        },
        is: function(selector) {
            return this.elements[0]?.matches(selector);
        }
    };

    // Make jQuery available globally
    window.$ = window.jQuery = $;
})(window); 